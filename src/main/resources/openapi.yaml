openapi: "3.0.0"
info:
  version: "1.0.0"
  title: "LAB 1"

tags:
  - name: Main task
    description: Base set of CRUD operations with collection
  - name: Additional task
    description: Additional operations with collection

paths:
  /tickets:
    post:
      tags:
        - Main task
      summary: Создать новый билет
      description: |
        Создание объекта Ticket
        - name - не может быть пустым
        - coordinates - не может быть null
        - price - значение должно быть больше 0 
        - type - не может быть null
        - person - не может быть null
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'
      responses:
        "200":
          description: Создание произошло успешно
          content:
            application/json:
              schema:
                type: string
                example: "Ticket created successfully"

        "400":
          description: Ошибка во входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "400"
                    message: "Validation Failed"

    get:
      summary: Получить список билетов
      description: Получение списка объектов типа Ticket
      tags:
        - Main task
      parameters:
        - name: sort
          in: query
          description: |
            Параметры для сортировки по полям объекта Ticket 
            - суффикс **.asc** - по возрастанию
            - суффикс **.des** - по убыванию
          required: false
          explode: true
          schema:
            type: array
            items:
              type: string
              enum:
                - id_asc
                - creationDate_asc
                - coordinates.x_asc
                - coordinates.y_asc
                - price_asc
                - id_des
                - creationDate_des
                - coordinates.x_des
                - coordinates.y_des
                - price_des
        - name: filter
          in: query
          required: false
          description: |
            Параметры для фильтрации. Допустимые параметры:
              - gt
              - eq
              - ne
              - lt
              - gte
              - lte
          schema:
            type: array
            items:
              type: string
              example: id_gt=1
          style: deepObject
          explode: true
        - name: page
          in: query
          required: false
          description: Номер страницы при пагинации
          schema:
            type: integer
            format: int64
            default: 0
            minimum: 0

      responses:
        '200':
          description: Returns an array of flats based on the specified parameters

          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketForComplexResponse'

        "400":
          description: Ошибка во входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "400"
                    message: "Validation Failed"

  /tickets/{id}:
    put:
      tags:
        - Main task
      summary: Обновить существующий билет по id
      description: |
        Обновление объекта Ticket по id
        - name - не может быть пустым
        - coordinates - не может быть null
        - price - значение должно быть больше 0 
        - type - не может быть null
        - person - не может быть null
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Ticket'

      parameters:
        - description: Идентификатор элемента
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          example: 1

      responses:
        "200":
          description: Обновление произошло успешно
          content:
            application/json:
              schema:
                type: string
                example: "Ticket updated successfully"
        "400":
          description: Ошибка во входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "400"
                    message: "Validation Failed"
        "404":
          description: Билет не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "404"
                    message: "Ticket not found"
    delete:
      tags:
        - Main task
      summary: Удалить существующий билет по id
      description:
        Удаление объекта Ticket по его id

      parameters:
        - description: Идентификатор элемента
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      responses:
        "200":
          description: Удаление произошло успешно
          content:
            application/json:
              schema:
                type: string
                example: "Ticket deleted successfully"
        "400":
          description: Ошибка во входных данных
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "400"
                    message: "Validation Failed"
        "404":
          description: Билет не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "404"
                    message: "Ticket not found"

    get:
      tags:
        - Main task
      parameters:
        - description: Идентификатор элемента
          in: path
          name: id
          required: true
          schema:
            type: integer
            format: int64
          example: 1
      summary: Получить билет по id
      description: Получение объекта Ticket по id

      responses:
        "200":
          description: Запрос выполнен успешно
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketForResponse'
        "400":
          description: Билет не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "400"
                    message: "Validation Failed"

  /tickets/byPrice/{price}:
    delete:
      tags:
        - Additional task
      summary: Удалить билет с данной ценой
      description: |
        Удаление одного объекта Ticket, значение поля price которого равен данному
      parameters:
        - description: Идентификатор элемента
          in: path
          name: price
          required: true
          schema:
            type: number
            format: double
          example: 350

      responses:
        "200":
          description: Запрос выполнен успешно. Возвращается удаленный объект
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/TicketForResponse'

        "404":
          description: Билет не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "404"
                    message: "Ticket not found"

    get:
      tags:
        - Additional task
      summary: Получить количество билетов с данной ценой
      description: |
        Получение количества объектов, значение поля price которых равно заданному.
      parameters:
        - description: Идентификатор элемента
          in: path
          name: price
          required: true
          schema:
            type: number
            format: double
          example: 350

      responses:
        "200":
          description: Запрос выполнен успешно. Возвращается количество подходящих объектов
          content:
            application/json:
              schema:
                type: integer
                example: 1

        "400":
          description: Билет не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "400"
                    message: "Validation Failed"

  /tickets/start/comment:
    get:
      tags:
        - Additional task
      summary: Получить список билетов с комментариями, начинающимися с заданной подстроки
      description: Вернуть массив объектов, значение поля comment которых начинается с заданной подстроки.
      parameters:
        - name: commentStartsWith
          in: query
          description: Подстрока, с которой должно начинаться значение поля comment
          required: false
          schema:
            type: string
          example: "строго"
      responses:
        "200":
          description: Успешный запрос, возвращает список билетов
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/TicketForResponse'

        "400":
          description: Билет не найден
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/ErrorMessage'
              examples:
                response:
                  value:
                    code: "400"
                    message: "Validation Failed"

components:
  schemas:
    TicketForComplexResponse:
      type: object
      description: Расширенный экземпляр типа Ticket с добавленным полем id
      allOf:
        - properties:
            pageNumber:
              type: integer
              format: int64
              nullable: false
              description: номер страницы
              example: 1
        - $ref: '#/components/schemas/TicketForResponse'

    TicketForResponse:
      type: object
      description: Расширенный экземпляр типа Ticket с добавленным полем id
      allOf:
        - properties:
            id:
              type: integer
              format: int64
              nullable: false
              description: id билета
              example: 1
        - $ref: '#/components/schemas/Ticket'

    Ticket:
      type: object
      description: Экземпляр типа Ticket
      properties:
        name:
          type: string
          nullable: false
          description: Название билета
          example: Luntik 3D
        coordinates:
          $ref: '#/components/schemas/Coordinates'
        creationDate:
          type: string
          format: date
          nullable: true
          description: Дата создания
        price:
          type: number
          format: double
          minimum: 1
          description: Цена билета
          example: 350
        comment:
          description: Комментарий к билету
          type: string
          nullable: false
          example: строго 6+
        type:
          $ref: '#/components/schemas/TicketType'
        person:
          $ref: '#/components/schemas/Person'

    Person:
      type: object
      description: Владелец билета
      properties:
        birthday:
          type: string
          format: date
          nullable: true
          description: Дата рождения
        Color_E:
          type: string
          enum:
            - RED
            - BLUE
            - ORANGE
            - WHITE
        Color_H:
          type: string
          enum:
            - GREEN
            - RED
            - YELLOW
            - WHITE

    Coordinates:
      type: object
      description: Координаты билета
      properties:
        x:
          description: Координата по оси абсцисс
          type: number
          nullable: false
        y:
          description: Координата по оси ординат
          type: integer
          maximum: 156

    TicketType:
      type: string
      description: Тип билета
      enum:
        - VIP
        - USUAL
        - BUDGETARY
        - CHEAP

    ErrorMessage:
      type: object
      required:
        - code
        - message
      properties:
        code:
          type: string
          nullable: false
        message:
          type: string
          nullable: false
    

  